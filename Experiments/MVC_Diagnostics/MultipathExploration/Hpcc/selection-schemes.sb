#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=5:00:00                # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=182                # number of jobs being created, each with its array id
#SBATCH --mem=3G                      # memory required per node - amount of memory (in gigs)
#SBATCH --job-name mul-mvc            # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab             # research group account being used

##################################
# Setup required dependencies
##################################
module load GCC/10.2.0; module load CUDA/11.1.1; module load Clang/11.0.1;

##################################
# Setup relevant directories
##################################
DATA_DIR=/mnt/gs21/scratch/herna383/ECJ-2023

##################################
# Setup random seed info
##################################
REPILCATE_OFFSET=10000
PROBLEM_SEED_OFFSET=1500
SEED_OFFSET=2000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET + SEED_OFFSET + REPILCATE_OFFSET))

##################################
# Setup selection scheme
##################################
TRUNCATION=0
TOURNAMENT=1
FITSHARING=2
LEXICASE=3
NONDOMINATED=4
NOVELTY=5

##################################
# Setup diagnostic
##################################
DIAGNOSTIC=3

##################################
# Treatments
##################################

SELECTION__SCHEME__TRUN__MIN=1
SELECTION__SCHEME__TRUN__MAX=50

SELECTION__SCHEME__TOUR__MIN=51
SELECTION__SCHEME__TOUR__MAX=100

SELECTION__SCHEME__FITG__MIN=101
SELECTION__SCHEME__FITG__MAX=150

SELECTION__SCHEME__FITP__MIN=151
SELECTION__SCHEME__FITP__MAX=200

SELECTION__SCHEME__LEXI__MIN=201
SELECTION__SCHEME__LEXI__MAX=250

SELECTION__SCHEME__NOND__MIN=251
SELECTION__SCHEME__NOND__MAX=300

SELECTION__SCHEME__NOVE__MIN=301
SELECTION__SCHEME__NOVE__MAX=350

SELECTION__SCHEME__RAND__MIN=351
SELECTION__SCHEME__RAND__MAX=400

##################################
# Variables that are shared for
# different selection schemes
##################################

T=8
FIT_APPLI=0

####################################################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__TRUN__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__TRUN__MAX} ] ; then
  SELECTION=${TRUNCATION}
  SCHEME=TRUNCATION

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__TOUR__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__TOUR__MAX} ] ; then
  SELECTION=${TOURNAMENT}
  SCHEME=TOURNAMENT

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__FITG__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__FITG__MAX} ] ; then
  SELECTION=${FITSHARING}
  SCHEME=FITSHARING_G

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__FITP__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__FITP__MAX} ] ; then
  SELECTION=${FITSHARING}
  SCHEME=FITSHARING_P
  FIT_APPLI=1

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__LEXI__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__LEXI__MAX} ] ; then
  SELECTION=${LEXICASE}
  SCHEME=LEXICASE

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__NOND__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__NOND__MAX} ] ; then
  SELECTION=${NONDOMINATED}
  SCHEME=NONDOMINATED

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__NOVE__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__NOVE__MAX} ] ; then
  SELECTION=${NOVELTY}
  SCHEME=NOVELTY
  T=2

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${SELECTION__SCHEME__RAND__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${SELECTION__SCHEME__RAND__MAX} ] ; then
  SELECTION=${TOURNAMENT}
  SCHEME=RANDOM
  T=1

else
  echo "${SEED} from ${PROBLEM} failed to launch" >> /mnt/ls15/scratch/users/herna383/ps-coh-failtolaunch.txt
fi

####################################################################

RUN_DIR=${DATA_DIR}/MVC_MULTIPATH_EXPLORATION/${SCHEME}/${SEED}/

# make a run directory
mkdir -p ${RUN_DIR}

echo "../../../../dia_world -SEED ${SEED} -DIAGNOSTIC ${DIAGNOSTIC} -SELECTION ${SELECTION} -OUTPUT_DIR ${RUN_DIR} -FIT_APPLI ${FIT_APPLI} -TOUR_SIZE ${T} -VALLEY_CROSSING 1 > run.log" > ./cmd-coh.txt

../../../../dia_world -SEED ${SEED} -DIAGNOSTIC ${DIAGNOSTIC} -SELECTION ${SELECTION} -OUTPUT_DIR ${RUN_DIR} -FIT_APPLI ${FIT_APPLI} -TOUR_SIZE ${T} -VALLEY_CROSSING 1