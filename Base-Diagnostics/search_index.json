[["index.html", "Supplemental Material: Base Diagnostics Chapter 1 Introduction 1.1 About our supplemental material 1.2 Contributing authors 1.3 Computer Setup 1.4 Experimental setup", " Supplemental Material: Base Diagnostics Jose Guadalupe Hernandez 2023-08-21 Chapter 1 Introduction This is the supplemental material for experiments with basic diagnostics. 1.1 About our supplemental material This supplemental material is hosted on GitHub using GitHub pages. The source code and configuration files used to generate this supplemental material can be found in this GitHub repository. We compiled our data analyses and supplemental documentation into this nifty web-accessible book using bookdown. Our supplemental material includes the following paper figures and statistics: Exploitation rate results (Section 2) Ordered exploitation results (Section 3) Contradictory objectives results (Section 4) Multi-path exploration results (Section 5) 1.2 Contributing authors Jose Guadalupe Hernandez Alexander Lalejini Charles Ofria 1.3 Computer Setup These analyses were conducted in the following computing environment: print(version) ## _ ## platform x86_64-pc-linux-gnu ## arch x86_64 ## os linux-gnu ## system x86_64, linux-gnu ## status ## major 4 ## minor 3.1 ## year 2023 ## month 06 ## day 16 ## svn rev 84548 ## language R ## version.string R version 4.3.1 (2023-06-16) ## nickname Beagle Scouts 1.4 Experimental setup Setting up required variables variables. # libraries we are using library(ggplot2) library(cowplot) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(PupillometryR) ## Loading required package: rlang # data diractory for gh-pages DATA_DIR = &#39;/opt/ECJ-2023-Suite-Of-Diagnostic-Metrics-For-Characterizing-Selection-Schemes/DATA/BASE_DIAGNOSTICS/&#39; # data diractory for local testing # DATA_DIR = &#39;~/Desktop/Repositories/ECJ-2023-Suite-Of-Diagnostic-Metrics-For-Characterizing-Selection-Schemes/DATA/BASE_DIAGNOSTICS/&#39; # graph variables SHAPE = c(5,3,1,2,6,0,4,20,1) cb_palette &lt;- c(&#39;#332288&#39;,&#39;#88CCEE&#39;,&#39;#EE7733&#39;,&#39;#EE3377&#39;,&#39;#117733&#39;,&#39;#882255&#39;,&#39;#44AA99&#39;,&#39;#CCBB44&#39;, &#39;#000000&#39;) TSIZE = 26 p_theme &lt;- theme( text = element_text(size = 28), plot.title = element_text( face = &quot;bold&quot;, size = 22, hjust=0.5), panel.border = element_blank(), panel.grid.minor = element_blank(), legend.title=element_text(size=22), legend.text=element_text(size=23), axis.title = element_text(size=23), axis.text = element_text(size=22), legend.position=&quot;bottom&quot;, panel.background = element_rect(fill = &quot;#f1f2f5&quot;, colour = &quot;white&quot;, size = 0.5, linetype = &quot;solid&quot;) ) ## Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0. ## i Please use the `linewidth` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. # colors for streak plots STK_SHAPE = c(2,6,0,4,20,1) stk_cb_palette &lt;- c(&#39;#EE3377&#39;,&#39;#117733&#39;,&#39;#882255&#39;,&#39;#44AA99&#39;,&#39;#CCBB44&#39;, &#39;#000000&#39;) # default variables REPLICATES = 50 DIMENSIONALITY = 100 GENERATIONS = 50000 # selection scheme related stuff ACRO = c(&#39;tru&#39;,&#39;tor&#39;,&#39;lex&#39;,&#39;gfs&#39;,&#39;pfs&#39;,&#39;nds&#39;,&#39;nov&#39;,&#39;ran&#39;) NAMES = c(&#39;Truncation (tru)&#39;,&#39;Tournament (tor)&#39;,&#39;Lexicase (lex)&#39;, &#39;Genotypic Fitness Sharing (gfs)&#39;,&#39;Phenotypic Fitness Sharing (pfs)&#39;,&#39;Nondominated Sorting (nds)&#39;,&#39;Novelty Search (nov)&#39;,&#39;Random (ran)&#39;) "],["exploitation-rate-results.html", "Chapter 2 Exploitation rate results 2.1 Data setup 2.2 Performance over time 2.3 Best performance throughout 2.4 Generation satisfactory solution found", " Chapter 2 Exploitation rate results Here we present the results for best performances found by each selection scheme on the exploitation rate diagnostic. 50 replicates are conducted for each scheme explored. 2.1 Data setup DIR = paste(DATA_DIR,&#39;EXPLOITATION_RATE/&#39;, sep = &quot;&quot;, collapse = NULL) over_time_df &lt;- read.csv(paste(DIR,&#39;over-time.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) over_time_df$scheme &lt;- factor(over_time_df$scheme, levels = NAMES) best_df &lt;- read.csv(paste(DIR,&#39;best.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) best_df$acro &lt;- factor(best_df$acro, levels = ACRO) sati_df &lt;- read.csv(paste(DIR,&#39;sol-fnd.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) sati_df$acro &lt;- factor(sati_df$acro, levels = ACRO) 2.2 Performance over time Best performance in a population over time. Data points on the graph is the average performance across 50 replicates every 2000 generations. Shading comes from the best and worse performance across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(pop_fit_max) / DIMENSIONALITY, mean = mean(pop_fit_max) / DIMENSIONALITY, max = max(pop_fit_max) / DIMENSIONALITY ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Performance over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 2.3 Best performance throughout Best performance reached throughout 50,000 generations in a population. plot = filter(best_df, var == &#39;pop_fit_max&#39;) %&gt;% ggplot(., aes(x = acro, y = val / DIMENSIONALITY, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Best performance throughout&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) ## Warning: Using the `size` aesthetic with geom_polygon was deprecated in ggplot2 3.4.0. ## i Please use the `linewidth` aesthetic instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: Removed 63 rows containing missing values (`geom_point()`). 2.3.1 Stats Summary statistics for the best performance. performance = filter(best_df, var == &#39;pop_fit_max&#39;) performance$acro = factor(performance$acro, levels = c(&#39;tru&#39;,&#39;tor&#39;,&#39;lex&#39;,&#39;gfs&#39;,&#39;pfs&#39;,&#39;nov&#39;,&#39;nds&#39;,&#39;ran&#39;)) performance %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(val)), min = min(val / DIMENSIONALITY, na.rm = TRUE), median = median(val / DIMENSIONALITY, na.rm = TRUE), mean = mean(val / DIMENSIONALITY, na.rm = TRUE), max = max(val / DIMENSIONALITY, na.rm = TRUE), IQR = IQR(val / DIMENSIONALITY, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 tru 50 0 100 100 100 100 0 ## 2 tor 50 0 100 100 100 100 0 ## 3 lex 50 0 99.9 99.9 99.9 99.9 0.0154 ## 4 gfs 50 0 57.3 59.3 59.4 61.1 0.984 ## 5 pfs 50 0 57.6 59.4 59.5 61.0 1.02 ## 6 nov 50 0 17.1 19.5 19.5 23.9 1.95 ## 7 nds 50 0 18.0 18.6 18.7 20.1 0.603 ## 8 ran 50 0 13.4 15.9 15.8 17.5 1.46 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(val ~ acro, data = performance) ## ## Kruskal-Wallis rank sum test ## ## data: val by acro ## Kruskal-Wallis chi-squared = 385.26, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = performance$val, g = performance$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: performance$val and performance$acro ## ## tru tor lex gfs pfs nov nds ## tor 1.000 - - - - - - ## lex &lt;2e-16 &lt;2e-16 - - - - - ## gfs &lt;2e-16 &lt;2e-16 &lt;2e-16 - - - - ## pfs &lt;2e-16 &lt;2e-16 &lt;2e-16 1.000 - - - ## nov &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 - - ## nds &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 0.018 - ## ran &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 ## ## P value adjustment method: bonferroni 2.4 Generation satisfactory solution found First generation a satisfactory solution is found throughout the 50,000 generations. plot = sati_df %&gt;% ggplot(., aes(x = acro, y = gen , color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Generation&quot;, limits=c(0, 60001), breaks=c(0, 10000, 20000, 30000, 40000, 50000, 60000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;, &quot;Fail&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Generation satisfactory solution found&#39;)+ p_theme + theme(legend.title=element_blank()) + guides( shape=guide_legend(nrow=2, title.position = &quot;bottom&quot;), color=guide_legend(nrow=2, title.position = &quot;bottom&quot;), fill=guide_legend(nrow=2, title.position = &quot;bottom&quot;) ) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 2.4.1 Stats Summary statistics for the generation a satisfactory solution is found. ssf = filter(sati_df, gen &lt;= GENERATIONS) ssf$acro = factor(ssf$acro, levels = c(&#39;tru&#39;,&#39;tor&#39;,&#39;lex&#39;)) ssf %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(gen)), min = min(gen, na.rm = TRUE), median = median(gen, na.rm = TRUE), mean = mean(gen, na.rm = TRUE), max = max(gen, na.rm = TRUE), IQR = IQR(gen, na.rm = TRUE) ) ## # A tibble: 3 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 tru 50 0 3392 3422 3423. 3475 26 ## 2 tor 50 0 5390 5444. 5447. 5509 43.2 ## 3 lex 50 0 24036 25626. 25883. 31709 1739. KruskalWallis test illustrates evidence of statistical differences. kruskal.test(gen ~ acro, data = ssf) ## ## Kruskal-Wallis rank sum test ## ## data: gen by acro ## Kruskal-Wallis chi-squared = 132.46, df = 2, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = ssf$gen, g = ssf$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;g&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: ssf$gen and ssf$acro ## ## tru tor ## tor &lt;2e-16 - ## lex &lt;2e-16 &lt;2e-16 ## ## P value adjustment method: bonferroni "],["ordered-exploitation-results.html", "Chapter 3 Ordered exploitation results 3.1 Data setup 3.2 Performance over time 3.3 Best performance throughout 3.4 Generation satisfactory solution found 3.5 Streaks over time 3.6 Longest streak throughout", " Chapter 3 Ordered exploitation results Here we present the results for best performances found by each selection scheme on the ordered exploitation diagnostic. 50 replicates are conducted for each scheme explored. 3.1 Data setup DIR = paste(DATA_DIR,&#39;ORDERED_EXPLOITATION/&#39;, sep = &quot;&quot;, collapse = NULL) over_time_df &lt;- read.csv(paste(DIR,&#39;over-time.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) over_time_df$scheme &lt;- factor(over_time_df$scheme, levels = NAMES) best_df &lt;- read.csv(paste(DIR,&#39;best.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) best_df$acro &lt;- factor(best_df$acro, levels = ACRO) sati_df &lt;- read.csv(paste(DIR,&#39;sol-fnd.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) sati_df$acro &lt;- factor(sati_df$acro, levels = ACRO) 3.2 Performance over time Best performance in a population over time. Data points on the graph is the average performance across 50 replicates every 2000 generations. Shading comes from the best and worse performance across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(pop_fit_max) / DIMENSIONALITY, mean = mean(pop_fit_max) / DIMENSIONALITY, max = max(pop_fit_max) / DIMENSIONALITY ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Performance over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 3.3 Best performance throughout Best performance reached throughout 50,000 generations in a population. plot = filter(best_df, var == &#39;pop_fit_max&#39;) %&gt;% ggplot(., aes(x = acro, y = val / DIMENSIONALITY, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Best performance throughout&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 3.3.1 Stats Summary statistics for the best performance. performance = filter(best_df, var == &#39;pop_fit_max&#39;) performance$acro = factor(performance$acro, levels = c(&#39;tru&#39;,&#39;tor&#39;,&#39;lex&#39;,&#39;nds&#39;,&#39;gfs&#39;,&#39;pfs&#39;,&#39;nov&#39;,&#39;ran&#39;)) performance %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(val)), min = min(val / DIMENSIONALITY, na.rm = TRUE), median = median(val / DIMENSIONALITY, na.rm = TRUE), mean = mean(val / DIMENSIONALITY, na.rm = TRUE), max = max(val / DIMENSIONALITY, na.rm = TRUE), IQR = IQR(val / DIMENSIONALITY, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 tru 50 0 100. 100. 100. 100. 0.00168 ## 2 tor 50 0 99.9 99.9 99.9 99.9 0.00650 ## 3 lex 50 0 99.7 99.8 99.8 99.9 0.0247 ## 4 nds 50 0 23.7 25.7 25.7 27.3 0.972 ## 5 gfs 50 0 19.7 21.0 21.0 22.6 0.754 ## 6 pfs 50 0 12.2 13.8 13.7 14.9 0.712 ## 7 nov 50 0 3.00 3.90 4.00 5.83 0.666 ## 8 ran 50 0 0.318 0.569 0.605 1.31 0.279 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(val ~ acro, data = performance) ## ## Kruskal-Wallis rank sum test ## ## data: val by acro ## Kruskal-Wallis chi-squared = 392.77, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = performance$val, g = performance$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: performance$val and performance$acro ## ## tru tor lex nds gfs pfs nov ## tor &lt;2e-16 - - - - - - ## lex &lt;2e-16 &lt;2e-16 - - - - - ## nds &lt;2e-16 &lt;2e-16 &lt;2e-16 - - - - ## gfs &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 - - - ## pfs &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 - - ## nov &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 - ## ran &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 ## ## P value adjustment method: bonferroni 3.4 Generation satisfactory solution found First generation a satisfactory solution is found throughout the 50,000 generations. plot = sati_df %&gt;% ggplot(., aes(x = acro, y = gen , color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Generation&quot;, limits=c(0, 60001), breaks=c(0, 10000, 20000, 30000, 40000, 50000, 60000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;, &quot;Fail&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Generation satisfactory solution found&#39;)+ p_theme + theme(legend.title=element_blank()) + guides( shape=guide_legend(nrow=2, title.position = &quot;bottom&quot;), color=guide_legend(nrow=2, title.position = &quot;bottom&quot;), fill=guide_legend(nrow=2, title.position = &quot;bottom&quot;) ) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 3.4.1 Stats Summary statistics for the generation a satisfactory solution is found. ssf = filter(sati_df, gen &lt;= GENERATIONS) ssf$acro = factor(ssf$acro, levels = c(&#39;tru&#39;,&#39;tor&#39;,&#39;lex&#39;)) ssf %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(gen)), min = min(gen, na.rm = TRUE), median = median(gen, na.rm = TRUE), mean = mean(gen, na.rm = TRUE), max = max(gen, na.rm = TRUE), IQR = IQR(gen, na.rm = TRUE) ) ## # A tibble: 3 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 tru 50 0 14776 15585 15570. 16317 420. ## 2 tor 50 0 25996 27138 27105. 28495 913. ## 3 lex 50 0 33877 38288. 38265. 43565 2215. KruskalWallis test illustrates evidence of statistical differences. kruskal.test(gen ~ acro, data = ssf) ## ## Kruskal-Wallis rank sum test ## ## data: gen by acro ## Kruskal-Wallis chi-squared = 132.45, df = 2, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = ssf$gen, g = ssf$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;g&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: ssf$gen and ssf$acro ## ## tru tor ## tor &lt;2e-16 - ## lex &lt;2e-16 &lt;2e-16 ## ## P value adjustment method: bonferroni 3.5 Streaks over time Longest streak of the best solution found in a population over time. A maximum streak value of 100 and a minimum streak value of 1 is possible. Data points on the graph is the average performance across 50 replicates every 2000 generations. Shading comes from the best and worse performance across 50 replicates. lines = filter(over_time_df, acro != &#39;tor&#39; &amp; acro != &#39;tru&#39; &amp; acro != &#39;lex&#39;) %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(ele_stk_cnt), mean = mean(ele_stk_cnt), max = max(ele_stk_cnt) ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Streak&quot;, limits=c(0, 45), breaks=seq(0,45, 15) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=STK_SHAPE)+ scale_colour_manual(values = stk_cb_palette) + scale_fill_manual(values = stk_cb_palette) + ggtitle(&#39;Longest streak over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 3.6 Longest streak throughout Longest streak of the best solution found in the population throughout 50,000 generations. plot = filter(best_df, var == &#39;ele_stk_cnt&#39; &amp; acro != &#39;tor&#39; &amp; acro != &#39;tru&#39; &amp; acro != &#39;lex&#39;) %&gt;% ggplot(., aes(x = acro, y = val, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Streak&quot;, limits=c(0, 45), breaks=seq(0,45, 15) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=STK_SHAPE)+ scale_colour_manual(values = stk_cb_palette) + scale_fill_manual(values = stk_cb_palette) + ggtitle(&#39;Longest streak throughout&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 3.6.1 Stats Summary statistics for the longest streak streak = filter(best_df, var == &#39;ele_stk_cnt&#39; &amp; acro != &#39;tor&#39; &amp; acro != &#39;tru&#39; &amp; acro != &#39;lex&#39;) streak$acro = factor(streak$acro, levels = c(&#39;nds&#39;,&#39;gfs&#39;,&#39;pfs&#39;,&#39;nov&#39;,&#39;ran&#39;)) streak %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(val)), min = min(val, na.rm = TRUE), median = median(val, na.rm = TRUE), mean = mean(val, na.rm = TRUE), max = max(val, na.rm = TRUE), IQR = IQR(val, na.rm = TRUE) ) ## # A tibble: 5 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 nds 50 0 28 36 36.2 43 4 ## 2 gfs 50 0 25 33.5 33.4 40 5.75 ## 3 pfs 50 0 17 25 24.8 32 4 ## 4 nov 50 0 13 16 16.3 21 3 ## 5 ran 50 0 6 7 7.18 10 2 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(val ~ acro, data = streak) ## ## Kruskal-Wallis rank sum test ## ## data: val by acro ## Kruskal-Wallis chi-squared = 226.43, df = 4, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = streak$val, g = streak$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: streak$val and streak$acro ## ## nds gfs pfs nov ## gfs 0.0017 - - - ## pfs &lt; 2e-16 2.7e-15 - - ## nov &lt; 2e-16 &lt; 2e-16 3.1e-16 - ## ran &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 ## ## P value adjustment method: bonferroni "],["contradictory-objectives-results.html", "Chapter 4 Contradictory objectives results 4.1 Data setup 4.2 Activation gene coverage over time 4.3 Final activation gene coverage 4.4 Satisfactory trait coverage over time 4.5 Final satisfactory trait coverage", " Chapter 4 Contradictory objectives results Here we present the results for activation gene coverage and satisfactory trait coverage found by each selection scheme on the contradictory objectives diagnostic. 50 replicates are conducted for each scheme explored. 4.1 Data setup DIR = paste(DATA_DIR,&#39;CONTRADICTORY_OBJECTIVES/&#39;, sep = &quot;&quot;, collapse = NULL) over_time_df &lt;- read.csv(paste(DIR,&#39;over-time.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) over_time_df$uni_str_pos = over_time_df$uni_str_pos + over_time_df$arc_acti_gene - over_time_df$overlap over_time_df$scheme &lt;- factor(over_time_df$scheme, levels = NAMES) over_time_df$acro &lt;- factor(over_time_df$acro, levels = ACRO) 4.2 Activation gene coverage over time Activation gene coverage in a population over time. Data points on the graph is the average activation gene coverage across 50 replicates every 2000 generations. Shading comes from the best and worse coverage across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(uni_str_pos), mean = mean(uni_str_pos), max = max(uni_str_pos) ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Activation gene coverage over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 4.3 Final activation gene coverage Activation gene coverage found in the final population at 50,000 generations. plot = filter(over_time_df, gen == 50000) %&gt;% ggplot(., aes(x = acro, y = uni_str_pos, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Final activation gene coverage&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) ## Warning: Removed 15 rows containing missing values (`geom_point()`). 4.3.1 Stats Summary statistics for the coverage found in the final population. act_coverage = filter(over_time_df, gen == 50000) act_coverage$acro = factor(act_coverage$acro, levels = c(&#39;nov&#39;,&#39;nds&#39;,&#39;lex&#39;,&#39;pfs&#39;,&#39;ran&#39;,&#39;gfs&#39;,&#39;tor&#39;,&#39;tru&#39;)) act_coverage %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(uni_str_pos)), min = min(uni_str_pos, na.rm = TRUE), median = median(uni_str_pos, na.rm = TRUE), mean = mean(uni_str_pos, na.rm = TRUE), max = max(uni_str_pos, na.rm = TRUE), IQR = IQR(uni_str_pos, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 nov 50 0 98 100 99.6 100 1 ## 2 nds 50 0 83 86 86.7 92 3 ## 3 lex 50 0 35 38 38.3 42 1 ## 4 pfs 50 0 2 4 4.12 6 2 ## 5 ran 50 0 1 2 2.22 6 2 ## 6 gfs 50 0 1 1 1 1 0 ## 7 tor 50 0 1 1 1 1 0 ## 8 tru 50 0 1 1 1 1 0 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(uni_str_pos ~ acro, data = act_coverage) ## ## Kruskal-Wallis rank sum test ## ## data: uni_str_pos by acro ## Kruskal-Wallis chi-squared = 381.66, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = act_coverage$uni_str_pos, g = act_coverage$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: act_coverage$uni_str_pos and act_coverage$acro ## ## nov nds lex pfs ran gfs tor ## nds &lt; 2e-16 - - - - - - ## lex &lt; 2e-16 &lt; 2e-16 - - - - - ## pfs &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 - - - - ## ran &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 7.1e-09 - - - ## gfs &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 6.0e-09 - - ## tor &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 6.0e-09 1 - ## tru &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 6.0e-09 1 1 ## ## P value adjustment method: bonferroni 4.4 Satisfactory trait coverage over time Satisfactory trait coverage in a population over time. Data points on the graph is the average activation gene coverage across 50 replicates every 2000 generations. Shading comes from the best and worse coverage across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(pop_uni_obj), mean = mean(pop_uni_obj), max = max(pop_uni_obj) ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Satisfactory trait coverage over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 4.5 Final satisfactory trait coverage Satisfactory trait coverage found in the final population at 50,000 generations. plot = filter(over_time_df, gen == 50000) %&gt;% ggplot(., aes(x = acro, y = pop_uni_obj, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Final satisfactory trait coverage&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) ## Warning: Removed 57 rows containing missing values (`geom_point()`). 4.5.1 Stats Summary statistics for the coverage found in the final population. sat_coverage = filter(over_time_df, gen == 50000) sat_coverage$acro = factor(sat_coverage$acro, levels = c(&#39;nds&#39;,&#39;lex&#39;,&#39;pfs&#39;,&#39;gfs&#39;,&#39;tor&#39;,&#39;tru&#39;,&#39;nov&#39;,&#39;ran&#39;)) sat_coverage %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(pop_uni_obj)), min = min(pop_uni_obj, na.rm = TRUE), median = median(pop_uni_obj, na.rm = TRUE), mean = mean(pop_uni_obj, na.rm = TRUE), max = max(pop_uni_obj, na.rm = TRUE), IQR = IQR(pop_uni_obj, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 nds 50 0 83 86 86.7 92 3 ## 2 lex 50 0 35 38 38.3 42 1 ## 3 pfs 50 0 2 4 3.88 6 2 ## 4 gfs 50 0 1 1 1 1 0 ## 5 tor 50 0 1 1 1 1 0 ## 6 tru 50 0 1 1 1 1 0 ## 7 nov 50 0 0 0 0 0 0 ## 8 ran 50 0 0 0 0 0 0 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(pop_uni_obj ~ acro, data = sat_coverage) ## ## Kruskal-Wallis rank sum test ## ## data: pop_uni_obj by acro ## Kruskal-Wallis chi-squared = 396.63, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = sat_coverage$pop_uni_obj, g = sat_coverage$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: sat_coverage$pop_uni_obj and sat_coverage$acro ## ## nds lex pfs gfs tor tru nov ## lex &lt;2e-16 - - - - - - ## pfs &lt;2e-16 &lt;2e-16 - - - - - ## gfs &lt;2e-16 &lt;2e-16 &lt;2e-16 - - - - ## tor &lt;2e-16 &lt;2e-16 &lt;2e-16 1 - - - ## tru &lt;2e-16 &lt;2e-16 &lt;2e-16 1 1 - - ## nov &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 - ## ran &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 &lt;2e-16 1 ## ## P value adjustment method: bonferroni "],["multi-path-exploration-results.html", "Chapter 5 Multi-path exploration results 5.1 Data setup 5.2 Activation gene coverage over time 5.3 Final activation gene coverage 5.4 Performance over time 5.5 Best performance throughout", " Chapter 5 Multi-path exploration results Here we present the results for best performances and activation gene coverage found by each selection scheme on the multi-path exploration diagnostic. 50 replicates are conducted for each scheme explored. 5.1 Data setup DIR = paste(DATA_DIR,&#39;MULTIPATH_EXPLORATION/&#39;, sep = &quot;&quot;, collapse = NULL) over_time_df &lt;- read.csv(paste(DIR,&#39;over-time.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) over_time_df$uni_str_pos = over_time_df$uni_str_pos + over_time_df$arc_acti_gene - over_time_df$overlap over_time_df$scheme &lt;- factor(over_time_df$scheme, levels = NAMES) over_time_df$acro &lt;- factor(over_time_df$acro, levels = ACRO) best_df &lt;- read.csv(paste(DIR,&#39;best.csv&#39;, sep = &quot;&quot;, collapse = NULL), header = TRUE, stringsAsFactors = FALSE) best_df$acro &lt;- factor(best_df$acro, levels = ACRO) 5.2 Activation gene coverage over time Activation gene coverage in a population over time. Data points on the graph is the average activation gene coverage across 50 replicates every 2000 generations. Shading comes from the best and worse coverage across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(uni_str_pos), mean = mean(uni_str_pos), max = max(uni_str_pos) ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Activation gene coverage over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 5.3 Final activation gene coverage Activation gene coverage found in the final population at 50,000 generations. plot = filter(over_time_df, gen == 50000) %&gt;% ggplot(., aes(x = acro, y = uni_str_pos, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Coverage&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Final activation gene coverage&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 5.3.1 Stats Summary statistics for the coverage found in the final population. act_coverage = filter(over_time_df, gen == 50000) act_coverage$acro = factor(act_coverage$acro, levels = c(&#39;nov&#39;,&#39;lex&#39;,&#39;nds&#39;,&#39;gfs&#39;,&#39;pfs&#39;,&#39;ran&#39;,&#39;tor&#39;,&#39;tru&#39;)) act_coverage %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(uni_str_pos)), min = min(uni_str_pos, na.rm = TRUE), median = median(uni_str_pos, na.rm = TRUE), mean = mean(uni_str_pos, na.rm = TRUE), max = max(uni_str_pos, na.rm = TRUE), IQR = IQR(uni_str_pos, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 nov 50 0 71 85.5 85.4 96 7.75 ## 2 lex 50 0 25 31 31.1 37 4 ## 3 nds 50 0 5 9 10.2 20 3 ## 4 gfs 50 0 2 3 3.48 5 1 ## 5 pfs 50 0 2 2.5 2.5 3 1 ## 6 ran 50 0 1 2 2.16 5 2 ## 7 tor 50 0 1 2 2.04 3 0 ## 8 tru 50 0 1 2 1.98 2 0 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(uni_str_pos ~ acro, data = act_coverage) ## ## Kruskal-Wallis rank sum test ## ## data: uni_str_pos by acro ## Kruskal-Wallis chi-squared = 350.25, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = act_coverage$uni_str_pos, g = act_coverage$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: act_coverage$uni_str_pos and act_coverage$acro ## ## nov lex nds gfs pfs ran tor ## lex &lt; 2e-16 - - - - - - ## nds &lt; 2e-16 &lt; 2e-16 - - - - - ## gfs &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 - - - - ## pfs &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 3.6e-10 - - - ## ran &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 9.4e-08 0.4 - - ## tor &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 1.2e-05 1.0 - ## tru &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 1.1e-07 1.0 1.0 ## ## P value adjustment method: bonferroni 5.4 Performance over time Best performance in a population over time. Data points on the graph is the average performance across 50 replicates every 2000 generations. Shading comes from the best and worse performance across 50 replicates. lines = over_time_df %&gt;% group_by(scheme, gen) %&gt;% dplyr::summarise( min = min(pop_fit_max) / DIMENSIONALITY, mean = mean(pop_fit_max) / DIMENSIONALITY, max = max(pop_fit_max) / DIMENSIONALITY ) ## `summarise()` has grouped output by &#39;scheme&#39;. You can override using the ## `.groups` argument. over_time_plot = ggplot(lines, aes(x=gen, y=mean, group = scheme, fill = scheme, color = scheme, shape = scheme)) + geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.1) + geom_line(size = 0.5) + geom_point(data = filter(lines, gen %% 2000 == 0 &amp; gen != 0), size = 1.5, stroke = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_continuous( name=&quot;Generations&quot;, limits=c(0, 50000), breaks=c(0, 10000, 20000, 30000, 40000, 50000), labels=c(&quot;0e+4&quot;, &quot;1e+4&quot;, &quot;2e+4&quot;, &quot;3e+4&quot;, &quot;4e+4&quot;, &quot;5e+4&quot;) ) + scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Performance over time&#39;)+ p_theme + theme(legend.title=element_blank(),legend.text=element_text(size=12)) + guides( shape=guide_legend(ncol=2, title.position = &quot;bottom&quot;), color=guide_legend(ncol=2, title.position = &quot;bottom&quot;), fill=guide_legend(ncol=2, title.position = &quot;bottom&quot;) ) over_time_plot 5.5 Best performance throughout Best performance reached throughout 50,000 generations in a population. plot = filter(best_df, var == &#39;pop_fit_max&#39;) %&gt;% ggplot(., aes(x = acro, y = val / DIMENSIONALITY, color = acro, fill = acro, shape = acro)) + geom_flat_violin(position = position_nudge(x = .1, y = 0), scale = &#39;width&#39;, alpha = 0.2, width = 1.5) + geom_boxplot(color = &#39;black&#39;, width = .07, outlier.shape = NA, alpha = 0.0, size = 1.0, position = position_nudge(x = .16, y = 0)) + geom_point(position = position_jitter(width = 0.03, height = 0.02), size = 2.0, alpha = 1.0) + scale_y_continuous( name=&quot;Average trait score&quot;, limits=c(0, 100), breaks=seq(0,100, 20), labels=c(&quot;0&quot;, &quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;, &quot;100&quot;) ) + scale_x_discrete( name=&quot;Scheme&quot; )+ scale_shape_manual(values=SHAPE)+ scale_colour_manual(values = cb_palette, ) + scale_fill_manual(values = cb_palette) + ggtitle(&#39;Best performance throughout&#39;)+ p_theme + theme(legend.title=element_blank()) plot_grid( plot + theme(legend.position=&quot;none&quot;), legend, nrow=2, rel_heights = c(3,1) ) 5.5.1 Stats Summary statistics for the best performance. performance = filter(best_df, var == &#39;pop_fit_max&#39;) performance$acro = factor(performance$acro, levels = c(&#39;lex&#39;,&#39;tru&#39;,&#39;tor&#39;,&#39;gfs&#39;,&#39;nds&#39;,&#39;pfs&#39;,&#39;nov&#39;,&#39;ran&#39;)) performance %&gt;% group_by(acro) %&gt;% dplyr::summarise( count = n(), na_cnt = sum(is.na(val)), min = min(val / DIMENSIONALITY, na.rm = TRUE), median = median(val / DIMENSIONALITY, na.rm = TRUE), mean = mean(val / DIMENSIONALITY, na.rm = TRUE), max = max(val / DIMENSIONALITY, na.rm = TRUE), IQR = IQR(val / DIMENSIONALITY, na.rm = TRUE) ) ## # A tibble: 8 x 8 ## acro count na_cnt min median mean max IQR ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 lex 50 0 83.4 92.3 91.9 98.1 5.51 ## 2 tru 50 0 16 66.0 61.1 99.0 47.0 ## 3 tor 50 0 5 47.0 48.9 97.9 46.2 ## 4 gfs 50 0 4.99 20.7 19.3 21.7 1.45 ## 5 nds 50 0 12.0 19.9 19.7 22.8 1.72 ## 6 pfs 50 0 5.87 13.6 13.2 15.9 1.39 ## 7 nov 50 0 2.52 3.83 3.87 5.33 0.793 ## 8 ran 50 0 0.865 1.19 1.23 1.72 0.247 KruskalWallis test illustrates evidence of statistical differences. kruskal.test(val ~ acro, data = performance) ## ## Kruskal-Wallis rank sum test ## ## data: val by acro ## Kruskal-Wallis chi-squared = 356.22, df = 7, p-value &lt; 2.2e-16 Results for post-hoc Wilcoxon rank-sum test with a Bonferroni correction. pairwise.wilcox.test(x = performance$val, g = performance$acro, p.adjust.method = &quot;bonferroni&quot;, paired = FALSE, conf.int = FALSE, alternative = &#39;l&#39;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: performance$val and performance$acro ## ## lex tru tor gfs nds pfs nov ## tru 4.4e-09 - - - - - - ## tor 1.1e-12 0.33 - - - - - ## gfs &lt; 2e-16 2.3e-13 4.3e-07 - - - - ## nds &lt; 2e-16 1.2e-13 6.8e-07 0.47 - - - ## pfs &lt; 2e-16 &lt; 2e-16 5.0e-12 2.3e-11 1.3e-15 - - ## nov &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 - ## ran &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 &lt; 2e-16 ## ## P value adjustment method: bonferroni "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
